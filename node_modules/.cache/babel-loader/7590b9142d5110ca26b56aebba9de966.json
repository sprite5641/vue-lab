{"ast":null,"code":"import _objectSpread from \"C:/Users/Sprite-PC/OneDrive/\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B/vue-notus/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"C:/Users/Sprite-PC/OneDrive/\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B/vue-notus/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"regenerator-runtime/runtime.js\";\nvar timer;\nexport default {\n  login: function login(context, payload) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", context.dispatch('auth', _objectSpread(_objectSpread({}, payload), {}, {\n                mode: 'login'\n              })));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  //   async signup(context, payload) {\n  //     return context.dispatch('auth', {\n  //       ...payload,\n  //       mode: 'signup'\n  //     });\n  //   },\n  auth: function auth(context, payload) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var response, responseData, error, expiresIn, expirationDate;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(url, {\n                method: 'POST',\n                body: JSON.stringify({\n                  email: payload.email,\n                  password: payload.password,\n                  returnSecureToken: true\n                })\n              });\n\n            case 2:\n              response = _context2.sent;\n              _context2.next = 5;\n              return response.json();\n\n            case 5:\n              responseData = _context2.sent;\n\n              if (response.ok) {\n                _context2.next = 9;\n                break;\n              }\n\n              error = new Error(responseData.message || 'Failed to authenticate. Check your login data.');\n              throw error;\n\n            case 9:\n              expiresIn = +responseData.expiresIn * 1000; // const expiresIn = 5000;\n\n              expirationDate = new Date().getTime() + expiresIn;\n              localStorage.setItem('token', responseData.idToken);\n              localStorage.setItem('userId', responseData.localId);\n              localStorage.setItem('tokenExpiration', expirationDate); // timer = setTimeout(function() {\n              //   context.dispatch('autoLogout');\n              // }, expiresIn);\n\n              context.commit('setUser', {\n                token: responseData.idToken,\n                userId: responseData.localId\n              });\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  tryLogin: function tryLogin(context) {\n    var token = localStorage.getItem('token');\n    var userId = localStorage.getItem('userId');\n    var tokenExpiration = localStorage.getItem('tokenExpiration');\n    var expiresIn = +tokenExpiration - new Date().getTime();\n\n    if (expiresIn < 0) {\n      return;\n    } // timer = setTimeout(function() {\n    //   context.dispatch('autoLogout');\n    // }, expiresIn);\n\n\n    if (token && userId) {\n      context.commit('setUser', {\n        token: token,\n        userId: userId\n      });\n    }\n  } //   logout(context) {\n  //     localStorage.removeItem('token');\n  //     localStorage.removeItem('userId');\n  //     localStorage.removeItem('tokenExpiration');\n  //     clearTimeout(timer);\n  //     context.commit('setUser', {\n  //       token: null,\n  //       userId: null\n  //     });\n  //   },\n  //   autoLogout(context) {\n  //     context.dispatch('logout');\n  //     context.commit('setAutoLogout');\n  //   }\n\n};","map":{"version":3,"sources":["C:/Users/Sprite-PC/OneDrive/เดสก์ท็อป/vue-notus/src/store/modules/auth/actions.js"],"names":["timer","login","context","payload","dispatch","mode","auth","fetch","url","method","body","JSON","stringify","email","password","returnSecureToken","response","json","responseData","ok","error","Error","message","expiresIn","expirationDate","Date","getTime","localStorage","setItem","idToken","localId","commit","token","userId","tryLogin","getItem","tokenExpiration"],"mappings":";;;;AAAA,IAAIA,KAAJ;AAEA,eAAe;AACPC,EAAAA,KADO,iBACDC,OADC,EACQC,OADR,EACiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACrBD,OAAO,CAACE,QAAR,CAAiB,MAAjB,kCACFD,OADE;AAELE,gBAAAA,IAAI,EAAE;AAFD,iBADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK7B,GANY;AAOf;AACA;AACA;AACA;AACA;AACA;AACQC,EAAAA,IAbO,gBAaFJ,OAbE,EAaOC,OAbP,EAagB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBASJI,KAAK,CAACC,GAAD,EAAM;AAChCC,gBAAAA,MAAM,EAAE,MADwB;AAEhCC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,kBAAAA,KAAK,EAAEV,OAAO,CAACU,KADI;AAEnBC,kBAAAA,QAAQ,EAAEX,OAAO,CAACW,QAFC;AAGnBC,kBAAAA,iBAAiB,EAAE;AAHA,iBAAf;AAF0B,eAAN,CATD;;AAAA;AASrBC,cAAAA,QATqB;AAAA;AAAA,qBAkBAA,QAAQ,CAACC,IAAT,EAlBA;;AAAA;AAkBrBC,cAAAA,YAlBqB;;AAAA,kBAoBtBF,QAAQ,CAACG,EApBa;AAAA;AAAA;AAAA;;AAqBnBC,cAAAA,KArBmB,GAqBX,IAAIC,KAAJ,CACZH,YAAY,CAACI,OAAb,IAAwB,gDADZ,CArBW;AAAA,oBAwBnBF,KAxBmB;;AAAA;AA2BrBG,cAAAA,SA3BqB,GA2BT,CAACL,YAAY,CAACK,SAAd,GAA0B,IA3BjB,EA4B3B;;AACMC,cAAAA,cA7BqB,GA6BJ,IAAIC,IAAJ,GAAWC,OAAX,KAAuBH,SA7BnB;AA+B3BI,cAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BV,YAAY,CAACW,OAA3C;AACAF,cAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BV,YAAY,CAACY,OAA5C;AACAH,cAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCJ,cAAxC,EAjC2B,CAmC3B;AACA;AACA;;AAEAtB,cAAAA,OAAO,CAAC6B,MAAR,CAAe,SAAf,EAA0B;AACxBC,gBAAAA,KAAK,EAAEd,YAAY,CAACW,OADI;AAExBI,gBAAAA,MAAM,EAAEf,YAAY,CAACY;AAFG,eAA1B;;AAvC2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2C5B,GAxDY;AAyDbI,EAAAA,QAzDa,oBAyDJhC,OAzDI,EAyDK;AAChB,QAAM8B,KAAK,GAAGL,YAAY,CAACQ,OAAb,CAAqB,OAArB,CAAd;AACA,QAAMF,MAAM,GAAGN,YAAY,CAACQ,OAAb,CAAqB,QAArB,CAAf;AACA,QAAMC,eAAe,GAAGT,YAAY,CAACQ,OAAb,CAAqB,iBAArB,CAAxB;AAEA,QAAMZ,SAAS,GAAG,CAACa,eAAD,GAAmB,IAAIX,IAAJ,GAAWC,OAAX,EAArC;;AAEA,QAAIH,SAAS,GAAG,CAAhB,EAAmB;AACjB;AACD,KATe,CAWhB;AACA;AACA;;;AAEA,QAAIS,KAAK,IAAIC,MAAb,EAAqB;AACnB/B,MAAAA,OAAO,CAAC6B,MAAR,CAAe,SAAf,EAA0B;AACxBC,QAAAA,KAAK,EAAEA,KADiB;AAExBC,QAAAA,MAAM,EAAEA;AAFgB,OAA1B;AAID;AACF,GA9EY,CA+Ef;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA9Fe,CAAf","sourcesContent":["let timer;\r\n\r\nexport default {\r\n  async login(context, payload) {\r\n    return context.dispatch('auth', {\r\n      ...payload,\r\n      mode: 'login'\r\n    });\r\n  },\r\n//   async signup(context, payload) {\r\n//     return context.dispatch('auth', {\r\n//       ...payload,\r\n//       mode: 'signup'\r\n//     });\r\n//   },\r\n  async auth(context, payload) {\r\n    // const mode = payload.mode;\r\n    // let url =\r\n    //   'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBvOcmh_Avvu08bFdUHdmJzA06c6vV4h0E';\r\n\r\n    // if (mode === 'signup') {\r\n    //   url =\r\n    //     'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBvOcmh_Avvu08bFdUHdmJzA06c6vV4h0E';\r\n    // }\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        email: payload.email,\r\n        password: payload.password,\r\n        returnSecureToken: true\r\n      })\r\n    });\r\n\r\n    const responseData = await response.json();\r\n\r\n    if (!response.ok) {\r\n      const error = new Error(\r\n        responseData.message || 'Failed to authenticate. Check your login data.'\r\n      );\r\n      throw error;\r\n    }\r\n\r\n    const expiresIn = +responseData.expiresIn * 1000;\r\n    // const expiresIn = 5000;\r\n    const expirationDate = new Date().getTime() + expiresIn;\r\n\r\n    localStorage.setItem('token', responseData.idToken);\r\n    localStorage.setItem('userId', responseData.localId);\r\n    localStorage.setItem('tokenExpiration', expirationDate);\r\n\r\n    // timer = setTimeout(function() {\r\n    //   context.dispatch('autoLogout');\r\n    // }, expiresIn);\r\n\r\n    context.commit('setUser', {\r\n      token: responseData.idToken,\r\n      userId: responseData.localId\r\n    });\r\n  },\r\n  tryLogin(context) {\r\n    const token = localStorage.getItem('token');\r\n    const userId = localStorage.getItem('userId');\r\n    const tokenExpiration = localStorage.getItem('tokenExpiration');\r\n\r\n    const expiresIn = +tokenExpiration - new Date().getTime();\r\n\r\n    if (expiresIn < 0) {\r\n      return;\r\n    }\r\n\r\n    // timer = setTimeout(function() {\r\n    //   context.dispatch('autoLogout');\r\n    // }, expiresIn);\r\n\r\n    if (token && userId) {\r\n      context.commit('setUser', {\r\n        token: token,\r\n        userId: userId\r\n      });\r\n    }\r\n  },\r\n//   logout(context) {\r\n//     localStorage.removeItem('token');\r\n//     localStorage.removeItem('userId');\r\n//     localStorage.removeItem('tokenExpiration');\r\n\r\n//     clearTimeout(timer);\r\n\r\n//     context.commit('setUser', {\r\n//       token: null,\r\n//       userId: null\r\n//     });\r\n//   },\r\n//   autoLogout(context) {\r\n//     context.dispatch('logout');\r\n//     context.commit('setAutoLogout');\r\n//   }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}